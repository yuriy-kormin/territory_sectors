"""
Django settings for territory_sectors project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# flake8: noqa

import os
from pathlib import Path
from datetime import timedelta


from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_path = os.path.join(BASE_DIR.parent, '.env-compose')
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

CERTBOT_DOMAINS = os.getenv('CERTBOT_DOMAINS')

ALLOWED_HOSTS = [f'{scheme}://{domain}'
                 for domain in CERTBOT_DOMAINS.split(',')
                 for scheme in ('http', 'https')
                 ] if CERTBOT_DOMAINS else ['*']

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
]

THIRD_PARTY_APPS = [
    'django_extensions',
    'bootstrap4',
    'simple_history',
    "qr_code",
    'graphene_django',
    'graphene_gis',
    'corsheaders',
]

PROJECT_APPS = [
    'territory_sectors',
    'territory_sectors.flat',
    'territory_sectors.house',
    'territory_sectors.sector',
    'territory_sectors.language',
    'territory_sectors.uuid_qr',
    "territory_sectors.issue",
    "territory_sectors.status",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'territory_sectors.urls'
# LOGIN_REDIRECT_URL = '/'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'territory_sectors.context_processors.google_analytics',
                'territory_sectors.context_processors.mapbox',
            ],
        },
    },
]

WSGI_APPLICATION = 'territory_sectors.wsgi.application'

GOOGLE_ANALYTICS_KEY = os.environ.get("GOOGLE_ANALYTICS_KEY")

ROLLBAR = {
    'access_token': os.getenv('ROLLBAR_ACCESS_TOKEN'),
    'environment': 'development' if DEBUG else 'production',
    'code_version': '1.0',
    'root': BASE_DIR,
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
    'default': dj_database_url.config(
        # default='spatialite:///db.sqlite3',
        # conn_max_age=600,
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if DEBUG:
    INTERNAL_IPS = ('127.0.0.1',)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Set the maximum file upload size to 20 megabytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 20971520

# Set the maximum request body size to 20 megabytes
DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520

LANGUAGE_CODE = 'ru-ru'
LOCALE_PATHS = (
    os.path.join(BASE_DIR, "territory_sectors", "locale"),
)

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

GRAPHENE = {
    'SCHEMA': 'territory_sectors.schema.schema'
}

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    # CORS_ALLOW_ALL_HEADERS = True
    # CORS_ALLOW_CREDENTIALS = True
    # CORS_ALLOW_METHODS = default_methods
    # CSRF_TRUSTED_ORIGINS = ['*']
    # CORS_ORIGIN_WHITELIST = ['http://localhost:3000']
    # CSRF_TRUSTED_ORIGINS = ['http://localhost:3000']

else:
    ALLOWED_HOSTS_ENV = os.getenv('ALLOWED_HOSTS', '*')
    if ALLOWED_HOSTS_ENV:
        ALLOWED_HOSTS = [
            host.strip() for host
            in ALLOWED_HOSTS_ENV.split(',')
        ]

    CORS_ALLOWED_ORIGINS = ALLOWED_HOSTS

from django.conf import settings

# Print all settings
# print("Django Settings:")
# for setting in dir(settings):
#     if setting.isupper():
#         print(f"{setting}: {getattr(settings, setting)}")

TOKEN_EXPIRATION = os.getenv('TOKEN_EXPIRATION', 5*60)  #5 minutes
REFRESH_EXPIRATION = os.getenv('REFRESH_EXPIRATION', 7*60*60*24) # 7 days default

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_EXPIRATION_DELTA": timedelta(seconds=int(TOKEN_EXPIRATION)),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(seconds=int(REFRESH_EXPIRATION)),
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}
